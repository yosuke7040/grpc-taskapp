// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/task/v1/task.proto

package task_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yosuke7040/grpc-taskapp/backend/interfaces/rpc/task/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TaskServiceName is the fully-qualified name of the TaskService service.
	TaskServiceName = "rpc.task.v1.TaskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TaskServiceGetTaskListProcedure is the fully-qualified name of the TaskService's GetTaskList RPC.
	TaskServiceGetTaskListProcedure = "/rpc.task.v1.TaskService/GetTaskList"
	// TaskServiceCreateTaskProcedure is the fully-qualified name of the TaskService's CreateTask RPC.
	TaskServiceCreateTaskProcedure = "/rpc.task.v1.TaskService/CreateTask"
	// TaskServiceCompleteTaskProcedure is the fully-qualified name of the TaskService's CompleteTask
	// RPC.
	TaskServiceCompleteTaskProcedure = "/rpc.task.v1.TaskService/CompleteTask"
	// TaskServiceUncompleteTaskProcedure is the fully-qualified name of the TaskService's
	// UncompleteTask RPC.
	TaskServiceUncompleteTaskProcedure = "/rpc.task.v1.TaskService/UncompleteTask"
	// TaskServiceChangeTaskNameProcedure is the fully-qualified name of the TaskService's
	// ChangeTaskName RPC.
	TaskServiceChangeTaskNameProcedure = "/rpc.task.v1.TaskService/ChangeTaskName"
	// TaskServiceDeleteTaskProcedure is the fully-qualified name of the TaskService's DeleteTask RPC.
	TaskServiceDeleteTaskProcedure = "/rpc.task.v1.TaskService/DeleteTask"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	taskServiceServiceDescriptor              = v1.File_rpc_task_v1_task_proto.Services().ByName("TaskService")
	taskServiceGetTaskListMethodDescriptor    = taskServiceServiceDescriptor.Methods().ByName("GetTaskList")
	taskServiceCreateTaskMethodDescriptor     = taskServiceServiceDescriptor.Methods().ByName("CreateTask")
	taskServiceCompleteTaskMethodDescriptor   = taskServiceServiceDescriptor.Methods().ByName("CompleteTask")
	taskServiceUncompleteTaskMethodDescriptor = taskServiceServiceDescriptor.Methods().ByName("UncompleteTask")
	taskServiceChangeTaskNameMethodDescriptor = taskServiceServiceDescriptor.Methods().ByName("ChangeTaskName")
	taskServiceDeleteTaskMethodDescriptor     = taskServiceServiceDescriptor.Methods().ByName("DeleteTask")
)

// TaskServiceClient is a client for the rpc.task.v1.TaskService service.
type TaskServiceClient interface {
	GetTaskList(context.Context, *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	CompleteTask(context.Context, *connect.Request[v1.CompleteTaskRequest]) (*connect.Response[v1.CompleteTaskResponse], error)
	UncompleteTask(context.Context, *connect.Request[v1.UncompleteTaskRequest]) (*connect.Response[v1.UncompleteTaskResponse], error)
	ChangeTaskName(context.Context, *connect.Request[v1.ChangeTaskNameRequest]) (*connect.Response[v1.ChangeTaskNameResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
}

// NewTaskServiceClient constructs a client for the rpc.task.v1.TaskService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTaskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &taskServiceClient{
		getTaskList: connect.NewClient[v1.GetTaskListRequest, v1.GetTaskListResponse](
			httpClient,
			baseURL+TaskServiceGetTaskListProcedure,
			connect.WithSchema(taskServiceGetTaskListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+TaskServiceCreateTaskProcedure,
			connect.WithSchema(taskServiceCreateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		completeTask: connect.NewClient[v1.CompleteTaskRequest, v1.CompleteTaskResponse](
			httpClient,
			baseURL+TaskServiceCompleteTaskProcedure,
			connect.WithSchema(taskServiceCompleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uncompleteTask: connect.NewClient[v1.UncompleteTaskRequest, v1.UncompleteTaskResponse](
			httpClient,
			baseURL+TaskServiceUncompleteTaskProcedure,
			connect.WithSchema(taskServiceUncompleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		changeTaskName: connect.NewClient[v1.ChangeTaskNameRequest, v1.ChangeTaskNameResponse](
			httpClient,
			baseURL+TaskServiceChangeTaskNameProcedure,
			connect.WithSchema(taskServiceChangeTaskNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+TaskServiceDeleteTaskProcedure,
			connect.WithSchema(taskServiceDeleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// taskServiceClient implements TaskServiceClient.
type taskServiceClient struct {
	getTaskList    *connect.Client[v1.GetTaskListRequest, v1.GetTaskListResponse]
	createTask     *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	completeTask   *connect.Client[v1.CompleteTaskRequest, v1.CompleteTaskResponse]
	uncompleteTask *connect.Client[v1.UncompleteTaskRequest, v1.UncompleteTaskResponse]
	changeTaskName *connect.Client[v1.ChangeTaskNameRequest, v1.ChangeTaskNameResponse]
	deleteTask     *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
}

// GetTaskList calls rpc.task.v1.TaskService.GetTaskList.
func (c *taskServiceClient) GetTaskList(ctx context.Context, req *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error) {
	return c.getTaskList.CallUnary(ctx, req)
}

// CreateTask calls rpc.task.v1.TaskService.CreateTask.
func (c *taskServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// CompleteTask calls rpc.task.v1.TaskService.CompleteTask.
func (c *taskServiceClient) CompleteTask(ctx context.Context, req *connect.Request[v1.CompleteTaskRequest]) (*connect.Response[v1.CompleteTaskResponse], error) {
	return c.completeTask.CallUnary(ctx, req)
}

// UncompleteTask calls rpc.task.v1.TaskService.UncompleteTask.
func (c *taskServiceClient) UncompleteTask(ctx context.Context, req *connect.Request[v1.UncompleteTaskRequest]) (*connect.Response[v1.UncompleteTaskResponse], error) {
	return c.uncompleteTask.CallUnary(ctx, req)
}

// ChangeTaskName calls rpc.task.v1.TaskService.ChangeTaskName.
func (c *taskServiceClient) ChangeTaskName(ctx context.Context, req *connect.Request[v1.ChangeTaskNameRequest]) (*connect.Response[v1.ChangeTaskNameResponse], error) {
	return c.changeTaskName.CallUnary(ctx, req)
}

// DeleteTask calls rpc.task.v1.TaskService.DeleteTask.
func (c *taskServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// TaskServiceHandler is an implementation of the rpc.task.v1.TaskService service.
type TaskServiceHandler interface {
	GetTaskList(context.Context, *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	CompleteTask(context.Context, *connect.Request[v1.CompleteTaskRequest]) (*connect.Response[v1.CompleteTaskResponse], error)
	UncompleteTask(context.Context, *connect.Request[v1.UncompleteTaskRequest]) (*connect.Response[v1.UncompleteTaskResponse], error)
	ChangeTaskName(context.Context, *connect.Request[v1.ChangeTaskNameRequest]) (*connect.Response[v1.ChangeTaskNameResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
}

// NewTaskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTaskServiceHandler(svc TaskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	taskServiceGetTaskListHandler := connect.NewUnaryHandler(
		TaskServiceGetTaskListProcedure,
		svc.GetTaskList,
		connect.WithSchema(taskServiceGetTaskListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceCreateTaskHandler := connect.NewUnaryHandler(
		TaskServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(taskServiceCreateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceCompleteTaskHandler := connect.NewUnaryHandler(
		TaskServiceCompleteTaskProcedure,
		svc.CompleteTask,
		connect.WithSchema(taskServiceCompleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceUncompleteTaskHandler := connect.NewUnaryHandler(
		TaskServiceUncompleteTaskProcedure,
		svc.UncompleteTask,
		connect.WithSchema(taskServiceUncompleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceChangeTaskNameHandler := connect.NewUnaryHandler(
		TaskServiceChangeTaskNameProcedure,
		svc.ChangeTaskName,
		connect.WithSchema(taskServiceChangeTaskNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceDeleteTaskHandler := connect.NewUnaryHandler(
		TaskServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(taskServiceDeleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/rpc.task.v1.TaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TaskServiceGetTaskListProcedure:
			taskServiceGetTaskListHandler.ServeHTTP(w, r)
		case TaskServiceCreateTaskProcedure:
			taskServiceCreateTaskHandler.ServeHTTP(w, r)
		case TaskServiceCompleteTaskProcedure:
			taskServiceCompleteTaskHandler.ServeHTTP(w, r)
		case TaskServiceUncompleteTaskProcedure:
			taskServiceUncompleteTaskHandler.ServeHTTP(w, r)
		case TaskServiceChangeTaskNameProcedure:
			taskServiceChangeTaskNameHandler.ServeHTTP(w, r)
		case TaskServiceDeleteTaskProcedure:
			taskServiceDeleteTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTaskServiceHandler struct{}

func (UnimplementedTaskServiceHandler) GetTaskList(context.Context, *connect.Request[v1.GetTaskListRequest]) (*connect.Response[v1.GetTaskListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.task.v1.TaskService.GetTaskList is not implemented"))
}

func (UnimplementedTaskServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.task.v1.TaskService.CreateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) CompleteTask(context.Context, *connect.Request[v1.CompleteTaskRequest]) (*connect.Response[v1.CompleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.task.v1.TaskService.CompleteTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) UncompleteTask(context.Context, *connect.Request[v1.UncompleteTaskRequest]) (*connect.Response[v1.UncompleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.task.v1.TaskService.UncompleteTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) ChangeTaskName(context.Context, *connect.Request[v1.ChangeTaskNameRequest]) (*connect.Response[v1.ChangeTaskNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.task.v1.TaskService.ChangeTaskName is not implemented"))
}

func (UnimplementedTaskServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("rpc.task.v1.TaskService.DeleteTask is not implemented"))
}
